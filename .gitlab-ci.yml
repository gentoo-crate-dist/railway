stages:
  - lint
  - build
  - deploy

variables:
  UPLOAD_URL_BASE: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}"
  BUILD: "build"
  BUILD_RELEASE: "build-release"
  MESON_DIST: "${BUILD_RELEASE}/meson-dist"
  PROJ_NAME_VERSION: "diebahn-${CI_COMMIT_TAG}"
  RUSTFLAGS: "-Dwarnings"

# flatpak, based on https://gitlab.gnome.org/GNOME/citemplates/raw/master/flatpak/flatpak_ci_initiative.yml
flatpak:
  image: 'quay.io/gnome_infrastructure/gnome-runtime-images:gnome-master'
  stage: build
  interruptible: true
  variables:
    LANG: "C.UTF-8"
    RUN_TESTS: "1"
    MANIFEST_PATH: 'build-aux/de.schmidhuberj.DieBahn.Devel.json'
    RUNTIME_REPO: 'https://nightly.gnome.org/gnome-nightly.flatpakrepo'
    FLATPAK_MODULE: 'diebahn'
    BUNDLE: "de.schmidhuberj.DieBahn.Devel.flatpak"
    APP_ID: 'de.schmidhuberj.DieBahn.Devel'

  script:
    - flatpak --version
    # Report the installed versions of the runtime
    - flatpak info org.gnome.Platform
    - flatpak info org.gnome.Sdk

    # Print the date, since appstream depends on local timezone
    - date && date -u

    - >-
      xvfb-run -a -s "-screen 0 1024x768x24" --
      dbus-run-session
      flatpak-builder --keep-build-dirs --user --disable-rofiles-fuse flatpak_app --repo=repo ${BRANCH:+--default-branch=$BRANCH} ${MANIFEST_PATH}

    # Generate a Flatpak bundle
    - flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
    - tar cf repo.tar repo/
  artifacts:
    name: 'Flatpak artifacts'
    when: 'always'
    paths:
      - $BUNDLE
      - 'repo.tar'
      - '.flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-logs/meson-log.txt'
      - '.flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-logs/testlog.txt'
    reports:
      junit: '.flatpak-builder/build/${FLATPAK_MODULE}/_flatpak_build/meson-logs/testlog.junit.xml'
    expire_in: 14 days
# end flatpak

i18n:
  stage: lint
  script:
    - ./build-aux/test/i18n-strings-check.sh

test:cargo-deny:
  stage: lint
  image: archlinux:base-devel
  script:
    - pacman -Syu rustup cargo-deny --noconfirm
    - rustup default stable
    - cargo deny check
  allow_failure: true

test:cargo-fmt:
  stage: lint
  image: archlinux:base-devel
  script:
    - pacman -Syu rustup meson gtk4 git cmake libadwaita libgirepository python-gobject --noconfirm
    - rustup default stable
    - rustup component add rustfmt
    - meson setup build
    - meson compile -C build resources_gresource
    - cargo fmt -- --check
  allow_failure: true

test:cargo-clippy:
  stage: lint
  image: archlinux:base-devel
  script:
    - pacman -Syu rustup meson gtk4 git cmake libadwaita libgirepository python-gobject --noconfirm
    - rustup default stable
    - rustup component add clippy
    - meson setup build
    - meson compile -C build resources_gresource
    - cargo clippy --verbose
  allow_failure: true

build_release:
  stage: build
  image: archlinux:base-devel
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pacman -Syu rustup meson gtk4 git cmake libadwaita libgirepository python-gobject --noconfirm
    - rustup default stable
    - meson setup $BUILD_RELEASE
    # Don't test, as Flatpak already builds it.
    - meson dist --no-tests -C $BUILD_RELEASE
  artifacts:
    paths:
      - ${MESON_DIST}/${PROJ_NAME_VERSION}.tar.xz
      - ${MESON_DIST}/${PROJ_NAME_VERSION}.tar.xz.sha256sum
    expire_in: 1 week


upload:
  stage: deploy
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${MESON_DIST}/${PROJ_NAME_VERSION}.tar.xz "${UPLOAD_URL_BASE}/${PROJ_NAME_VERSION}.tar.xz"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${MESON_DIST}/${PROJ_NAME_VERSION}.tar.xz.sha256sum "${UPLOAD_URL_BASE}/${PROJ_NAME_VERSION}.tar.xz.sha256sum"'

